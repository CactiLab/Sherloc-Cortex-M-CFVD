
#ifndef BT_S_H
#define BT_S_H

/********************************************
* used for run-time control flow validation *
*********************************************/

#include <stdint.h>

#define NUM_BRANCH_PAIRS 1
#define NUM_HANDLER 3
#define NUM_TASK 0
#define NUM_LOOP 4

const uint32_t icall_count = 0; 
const uint32_t ibranch_count = 1; 
const uint32_t dbranch_count = 127;
const uint32_t dcall_count = 56; 
const uint32_t ret_count = 72; 
const uint32_t handler_count = 3; 
const uint32_t PendSV = 0xdeadbeef;

const uint32_t PendSV_Entry = 0xdeadbeef;

/* branch_tab_64: <src, dst> */
const uint32_t branch_tab_32[] = { 0xf7a004b };

/* exception_tab: <start_addr, end_addr> */
const uint32_t IRQ[] = { 0x200454, 0x200456, 0x200458 };
const uint32_t TASK[] = {  };
const uint32_t LOOP[] = { 0x20044e, 0x200454, 0x200456, 0x200764 };

const uint32_t icall_list[] = {  };
const uint32_t ibranch_list[] = {  };
const uint32_t dcall_list[] = { 0x200404, 0x20040a, 0x200418, 0x20041c, 0x200420, 0x20042a, 0x200430, 0x20047a, 0x20049a, 0x2004fe, 0x20051e, 0x20052e, 0x20053c, 0x200550, 0x200584, 0x200598, 0x2005a6, 0x2005b6, 0x2005c6, 0x2005ce, 0x2005da, 0x2005e6, 0x20060c, 0x200622, 0x200632, 0x200658, 0x200670, 0x200684, 0x20068c, 0x20069c, 0x2006ac, 0x2006b8, 0x2006bc, 0x2006c0, 0x2006cc, 0x2006de, 0x2006f2, 0x200700, 0x200710, 0x200720, 0x20075a, 0x2008f0, 0x200b0e, 0x200b44, 0x200c2c, 0x200c90, 0x200d30, 0x200da8, 0x200ed4, 0x20117e, 0x201196, 0x2011a4, 0x2011b2, 0x2011c0, 0x2011ce, 0x2011dc };
const uint32_t ret_list[] = { 0x20040e, 0x200412, 0x200446, 0x200778, 0x200834, 0x200840, 0x200858, 0x2008c8, 0x2008e8, 0x200912, 0x200a30, 0x200a44, 0x200ace, 0x200af4, 0x200b28, 0x200b3e, 0x200b6c, 0x200be0, 0x200be6, 0x200bf8, 0x200bfc, 0x200c0e, 0x200c14, 0x200c28, 0x200c70, 0x200c78, 0x200c8c, 0x200c9a, 0x200cc4, 0x200cca, 0x200ce4, 0x200cea, 0x200cfc, 0x200d00, 0x200d12, 0x200d18, 0x200d2c, 0x200d5c, 0x200d62, 0x200d74, 0x200d78, 0x200d8a, 0x200d90, 0x200da4, 0x200e82, 0x200eb4, 0x200ed2, 0x200f06, 0x200f90, 0x200faa, 0x200fb6, 0x201046, 0x201050, 0x20105c, 0x2010b8, 0x2010c4, 0x2010fe, 0x20110c, 0x20111c, 0x201130, 0x201146, 0x201156, 0x201160, 0x201176, 0x20118e, 0x2011a0, 0x2011ae, 0x2011bc, 0x2011ca, 0x2011d8, 0x2011e6, 0x201200 };
const uint32_t dbranch_list[] = { 0x200442, 0x20044e, 0x200454, 0x200456, 0x2004b2, 0x2004c4, 0x2004d0, 0x2004d6, 0x200554, 0x200574, 0x2005ea, 0x200602, 0x20065c, 0x200692, 0x2006e2, 0x2006f6, 0x200742, 0x200748, 0x200754, 0x200762, 0x200764, 0x20077a, 0x200792, 0x2007b8, 0x2007c2, 0x2007e6, 0x2007fa, 0x200824, 0x20085e, 0x200886, 0x20089a, 0x2008a6, 0x2008ac, 0x2008b6, 0x2008b8, 0x2008ce, 0x2008d6, 0x200928, 0x20093e, 0x200970, 0x200a18, 0x200a2c, 0x200a40, 0x200a4a, 0x200a58, 0x200a9e, 0x200aac, 0x200abe, 0x200ada, 0x200adc, 0x200ae2, 0x200b02, 0x200b18, 0x200b2e, 0x200b50, 0x200b54, 0x200b56, 0x200b58, 0x200b5a, 0x200b5c, 0x200b6e, 0x200b70, 0x200b76, 0x200b78, 0x200bcc, 0x200bd8, 0x200be8, 0x200bf4, 0x200c02, 0x200c08, 0x200c24, 0x200c3c, 0x200c56, 0x200c82, 0x200c9c, 0x200cae, 0x200cd0, 0x200cdc, 0x200cec, 0x200cf8, 0x200d06, 0x200d0c, 0x200d28, 0x200d40, 0x200d48, 0x200d54, 0x200d64, 0x200d70, 0x200d7e, 0x200d84, 0x200da0, 0x200db8, 0x200dd4, 0x200e26, 0x200e3e, 0x200e62, 0x200e80, 0x200ea4, 0x200ec4, 0x200edc, 0x200ee0, 0x200eec, 0x200ef2, 0x200efe, 0x200f1e, 0x200f2a, 0x200f36, 0x200f38, 0x200f50, 0x200f56, 0x200f6c, 0x200fc4, 0x200fce, 0x200ff6, 0x201010, 0x201036, 0x201078, 0x20108a, 0x2010a2, 0x2010c6, 0x2010d4, 0x201116, 0x201126, 0x201140, 0x20114e, 0x201166, 0x201230 };


#endif // BT_S
                