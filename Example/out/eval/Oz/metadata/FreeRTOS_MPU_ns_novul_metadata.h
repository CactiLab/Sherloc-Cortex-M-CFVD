
#ifndef BT_S_H
#define BT_S_H

/********************************************
* used for run-time control flow validation *
*********************************************/

#include <stdint.h>

#define NUM_BRANCH_PAIRS 1
#define NUM_HANDLER 6
#define NUM_TASK 4
#define NUM_LOOP 19

const uint32_t icall_count = 3; 
const uint32_t ibranch_count = 6; 
const uint32_t dbranch_count = 203;
const uint32_t dcall_count = 88; 
const uint32_t ret_count = 30; 
const uint32_t handler_count = 6; 
const uint32_t PendSV = 0x201498;

const uint32_t PendSV_Entry = 0x201498;

/* branch_tab_64: <src, dst> */
const uint32_t branch_tab_32[] = { 0xfaa0f32 };

/* exception_tab: <start_addr, end_addr> */
const uint32_t IRQ[] = { 0x2013b0, 0x201544, 0x2017f8, 0x2017fa, 0x2017fc, 0x201814 };
const uint32_t TASK[] = { 0x200cec, 0x200d58, 0x200e20, 0x201058, 0x201a9c, 0x201a9e, 0x201aec, 0x201b46 };
const uint32_t LOOP[] = { 0x20067c, 0x200682, 0x200688, 0x20068e, 0x2006de, 0x20073a, 0x200aca, 0x200bec, 0x200d54, 0x200db6, 0x201050, 0x201056, 0x201238, 0x20128a, 0x201334, 0x20133c, 0x2013a0, 0x2015ae, 0x2015fa };

const uint32_t icall_list[] = { 0x200ff0, 0x201032, 0x2011b6 };
const uint32_t ibranch_list[] = { 0xfaa0f32 };
const uint32_t dcall_list[] = { 0x200400, 0x200404, 0x20041a, 0x2004f6, 0x200542, 0x20056c, 0x2005a6, 0x2005ea, 0x200642, 0x200646, 0x20065e, 0x200678, 0x20067e, 0x200684, 0x20068a, 0x2006a4, 0x2006cc, 0x2006da, 0x2006fe, 0x200736, 0x200894, 0x200978, 0x2009bc, 0x2009c6, 0x2009e8, 0x2009ee, 0x2009f8, 0x200a3a, 0x200a88, 0x200aaa, 0x200abc, 0x200ac6, 0x200b6c, 0x200b76, 0x200be8, 0x200c08, 0x200cfe, 0x200d0a, 0x200d1a, 0x200d2e, 0x200d34, 0x200d50, 0x200db2, 0x200e46, 0x200e4c, 0x200e58, 0x200e5e, 0x200e82, 0x200e8c, 0x200ea8, 0x200ec8, 0x200f06, 0x200f0c, 0x200f10, 0x200f26, 0x200f2e, 0x200f40, 0x200f62, 0x200f72, 0x200f86, 0x200f98, 0x200f9e, 0x200fd0, 0x20101c, 0x20102a, 0x201040, 0x201046, 0x20104c, 0x201052, 0x2010fc, 0x20112c, 0x201148, 0x201188, 0x2011aa, 0x201228, 0x201234, 0x201286, 0x201290, 0x201330, 0x201338, 0x201356, 0x20136e, 0x20139c, 0x2013b2, 0x2013b8, 0x2014ca, 0x2015aa, 0x2015f6 };
const uint32_t ret_list[] = { 0x200474, 0x200492, 0x2004cc, 0x2004ee, 0x2006e2, 0x200880, 0x20099a, 0x200a02, 0x200a1e, 0x200a6c, 0x200a94, 0x200ac2, 0x200bce, 0x200ce0, 0x200e10, 0x201114, 0x20118e, 0x201192, 0x2011bc, 0x201232, 0x201308, 0x201336, 0x201382, 0x20139a, 0x201450, 0x201488, 0x201496, 0x201570, 0x2015a8, 0x2015f4 };
const uint32_t dbranch_list[] = { 0x200418, 0x200456, 0x200462, 0x200466, 0x20046e, 0x200472, 0x200486, 0x2004a6, 0x2004b4, 0x2004b6, 0x200508, 0x200514, 0x200522, 0x20052c, 0x20053a, 0x200560, 0x200566, 0x200570, 0x200572, 0x200578, 0x200588, 0x20058e, 0x200598, 0x20059e, 0x2005aa, 0x2005ac, 0x2005b4, 0x2005be, 0x2005c4, 0x2005cc, 0x2005e0, 0x2005e2, 0x20062c, 0x20063a, 0x200654, 0x200658, 0x200662, 0x200668, 0x200674, 0x20067c, 0x200682, 0x200688, 0x20068e, 0x2006a0, 0x2006a8, 0x2006d8, 0x2006de, 0x20070c, 0x200716, 0x200722, 0x20072a, 0x200734, 0x20073a, 0x20076c, 0x200778, 0x200780, 0x200794, 0x2007aa, 0x2007ac, 0x2007b2, 0x2007e8, 0x2007f6, 0x20087a, 0x2008a2, 0x2008a8, 0x2008b6, 0x2008be, 0x2008cc, 0x2008e2, 0x20097e, 0x200988, 0x2009c0, 0x2009ca, 0x2009f4, 0x200a0e, 0x200a16, 0x200a40, 0x200a42, 0x200a74, 0x200a80, 0x200aa8, 0x200ab6, 0x200aca, 0x200ad4, 0x200aea, 0x200b68, 0x200b6a, 0x200b72, 0x200b7a, 0x200b80, 0x200b8a, 0x200ba0, 0x200bc0, 0x200bde, 0x200be6, 0x200bec, 0x200c14, 0x200c26, 0x200c38, 0x200c56, 0x200cb2, 0x200cfc, 0x200d24, 0x200d28, 0x200d2a, 0x200d38, 0x200d3e, 0x200d4e, 0x200d54, 0x200d6a, 0x200d92, 0x200db0, 0x200db6, 0x200e2e, 0x200e36, 0x200e6c, 0x200e74, 0x200e8a, 0x200e90, 0x200e92, 0x200e96, 0x200e9a, 0x200ece, 0x200f14, 0x200f24, 0x200f36, 0x200f3c, 0x200f48, 0x200f4e, 0x200f6c, 0x200f76, 0x200f8e, 0x200f94, 0x200fa8, 0x200fd6, 0x200fde, 0x200fe8, 0x200ff2, 0x201000, 0x201012, 0x201020, 0x201034, 0x20103c, 0x201044, 0x20104a, 0x201050, 0x201056, 0x2010ec, 0x2010f2, 0x201100, 0x201104, 0x201136, 0x201140, 0x20116a, 0x201172, 0x201176, 0x201178, 0x201180, 0x2011ae, 0x2011ba, 0x2011cc, 0x2011d8, 0x201224, 0x201238, 0x201240, 0x20124c, 0x20124e, 0x201256, 0x201266, 0x20126c, 0x201272, 0x20127e, 0x201284, 0x20128a, 0x2012bc, 0x2012d6, 0x2012ec, 0x2012f0, 0x2012f6, 0x201312, 0x201326, 0x20132e, 0x201334, 0x20133c, 0x201364, 0x20138e, 0x201398, 0x2013a0, 0x2013a8, 0x2013bc, 0x2013cc, 0x20156a, 0x201586, 0x201588, 0x20158e, 0x2015ae, 0x2015c2, 0x2015c6, 0x2015e2, 0x2015ea, 0x2015f2, 0x2015fa, 0x201600 };


#endif // BT_S
                