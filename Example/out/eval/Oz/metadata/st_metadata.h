
#ifndef BT_S_H
#define BT_S_H

/********************************************
* used for run-time control flow validation *
*********************************************/

#include <stdint.h>

#define NUM_BRANCH_PAIRS 2
#define NUM_HANDLER 3
#define NUM_TASK 0
#define NUM_LOOP 4

const uint32_t icall_count = 0; 
const uint32_t ibranch_count = 2; 
const uint32_t dbranch_count = 111;
const uint32_t dcall_count = 47; 
const uint32_t ret_count = 51; 
const uint32_t handler_count = 3; 
const uint32_t PendSV = 0xdeadbeef;

const uint32_t PendSV_Entry = 0xdeadbeef;

/* branch_tab_64: <src, dst> */
const uint32_t branch_tab_32[] = { 0x432004b, 0xe62004b };

/* exception_tab: <start_addr, end_addr> */
const uint32_t IRQ[] = { 0x2005a8, 0x2005aa, 0x2005b8 };
const uint32_t TASK[] = {  };
const uint32_t LOOP[] = { 0x2004be, 0x2005a8, 0x2005aa, 0x2007c6 };

const uint32_t icall_list[] = {  };
const uint32_t ibranch_list[] = {  };
const uint32_t dcall_list[] = { 0x200400, 0x200404, 0x20041a, 0x20045a, 0x200468, 0x20046c, 0x200470, 0x20047a, 0x200480, 0x200486, 0x200492, 0x2004ee, 0x20050a, 0x20054c, 0x200554, 0x200560, 0x200578, 0x200584, 0x2005da, 0x200630, 0x200638, 0x200644, 0x20065c, 0x20069a, 0x2006d2, 0x2006dc, 0x2006f2, 0x2006f8, 0x200702, 0x200718, 0x20073a, 0x20074a, 0x20075a, 0x200766, 0x200776, 0x200782, 0x20079c, 0x2007a8, 0x2007bc, 0x200808, 0x20085a, 0x2009b4, 0x200bba, 0x200bf0, 0x200dbc, 0x201020, 0x2011fe };
const uint32_t ret_list[] = { 0x200456, 0x20045e, 0x200462, 0x20048c, 0x200498, 0x20049e, 0x2004b6, 0x200516, 0x200592, 0x200674, 0x20086c, 0x2008f8, 0x200904, 0x20091c, 0x20098c, 0x2009ac, 0x200adc, 0x200af0, 0x200b7a, 0x200ba0, 0x200bd4, 0x200bea, 0x200c18, 0x200c9a, 0x200ca0, 0x200d6a, 0x200d9c, 0x200dba, 0x200dee, 0x200e78, 0x200e92, 0x200e9e, 0x200f9a, 0x200fac, 0x201016, 0x201032, 0x2010c6, 0x2010d0, 0x2010dc, 0x201138, 0x201144, 0x20117e, 0x20118c, 0x20119c, 0x2011b0, 0x2011c6, 0x2011d6, 0x2011e0, 0x2011f6, 0x20120e, 0x20122c };
const uint32_t dbranch_list[] = { 0x200418, 0x20044a, 0x2004b2, 0x2004be, 0x2004de, 0x2004fc, 0x200544, 0x20056a, 0x2005a8, 0x2005aa, 0x2005b4, 0x20061a, 0x200668, 0x2006b0, 0x2006c0, 0x200730, 0x200792, 0x2007b6, 0x2007c4, 0x2007c6, 0x2007d2, 0x200832, 0x20087c, 0x200886, 0x2008aa, 0x2008be, 0x2008e8, 0x200922, 0x20094a, 0x20095e, 0x20096a, 0x200970, 0x20097a, 0x20097c, 0x200992, 0x20099a, 0x2009d4, 0x2009ea, 0x200a1c, 0x200ac4, 0x200ad8, 0x200aec, 0x200af6, 0x200b04, 0x200b4a, 0x200b58, 0x200b6a, 0x200b86, 0x200b88, 0x200b8e, 0x200bae, 0x200bc4, 0x200bda, 0x200bfc, 0x200c00, 0x200c02, 0x200c04, 0x200c06, 0x200c08, 0x200c1a, 0x200c1c, 0x200c22, 0x200c24, 0x200c84, 0x200cbc, 0x200d0e, 0x200d26, 0x200d4a, 0x200d68, 0x200d8c, 0x200dac, 0x200dc4, 0x200dc8, 0x200dd4, 0x200dda, 0x200de6, 0x200e06, 0x200e12, 0x200e1e, 0x200e20, 0x200e38, 0x200e3e, 0x200e54, 0x200eac, 0x200ec8, 0x200f94, 0x200fa4, 0x200fa6, 0x200fe0, 0x200fe8, 0x200ff0, 0x200ff8, 0x201000, 0x20100a, 0x20100c, 0x201024, 0x201044, 0x20104e, 0x201076, 0x201090, 0x2010b6, 0x2010f8, 0x20110a, 0x201122, 0x201146, 0x201154, 0x201196, 0x2011a6, 0x2011c0, 0x2011ce, 0x2011e6 };


#endif // BT_S
                