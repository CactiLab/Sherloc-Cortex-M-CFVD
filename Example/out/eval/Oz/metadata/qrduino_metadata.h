
#ifndef BT_S_H
#define BT_S_H

/********************************************
* used for run-time control flow validation *
*********************************************/

#include <stdint.h>

#define NUM_BRANCH_PAIRS 12
#define NUM_HANDLER 3
#define NUM_TASK 0
#define NUM_LOOP 4

const uint32_t icall_count = 14; 
const uint32_t ibranch_count = 12; 
const uint32_t dbranch_count = 269;
const uint32_t dcall_count = 64; 
const uint32_t ret_count = 32; 
const uint32_t handler_count = 3; 
const uint32_t PendSV = 0xdeadbeef;

const uint32_t PendSV_Entry = 0xdeadbeef;

/* branch_tab_64: <src, dst> */
const uint32_t branch_tab_32[] = { 0x432004b, 0x8920bc2, 0xf1c1ac4, 0xf2a1ac4, 0xf301ac4, 0xf3a1ac4, 0x10181ac4, 0x10241ac4, 0x10321ac4, 0x104c1ac4, 0x105a1ac4, 0x10661ac4 };

/* exception_tab: <start_addr, end_addr> */
const uint32_t IRQ[] = { 0x200762, 0x200764, 0x2007ac };
const uint32_t TASK[] = {  };
const uint32_t LOOP[] = { 0x2004de, 0x200762, 0x200764, 0x201924 };

const uint32_t icall_list[] = { 0x200f1c, 0x200f2a, 0x200f30, 0x200f3a, 0x201018, 0x201024, 0x201032, 0x20104c, 0x20105a, 0x201066, 0x201a98, 0x201aa2, 0x201aaa, 0x201ab4 };
const uint32_t ibranch_list[] = { 0x8920bc2 };
const uint32_t dcall_list[] = { 0x200400, 0x200404, 0x20041a, 0x20045a, 0x200468, 0x20046c, 0x200470, 0x20047a, 0x200480, 0x20078e, 0x2007ce, 0x2007f6, 0x200840, 0x20085a, 0x200870, 0x2008ce, 0x2008d8, 0x2008e6, 0x200902, 0x200910, 0x20091e, 0x200942, 0x200950, 0x2009a0, 0x2009aa, 0x2009fe, 0x200a92, 0x200b1e, 0x200ba2, 0x200bb0, 0x200c68, 0x200cae, 0x200dc2, 0x200dd0, 0x200de6, 0x201076, 0x201090, 0x201098, 0x2010b6, 0x20110e, 0x201116, 0x201158, 0x201168, 0x2011f6, 0x201212, 0x20121a, 0x201294, 0x2012a4, 0x201374, 0x20139a, 0x2013f0, 0x201420, 0x2014fc, 0x201516, 0x2015fe, 0x201622, 0x201644, 0x201762, 0x2017e4, 0x20181e, 0x201848, 0x201918, 0x202058, 0x202092 };
const uint32_t ret_list[] = { 0x200456, 0x20045e, 0x200462, 0x2004ac, 0x2004b0, 0x2004b8, 0x2004c0, 0x2004d4, 0x20056c, 0x2005f0, 0x200634, 0x20067c, 0x200698, 0x2006f6, 0x200712, 0x20074e, 0x200760, 0x200774, 0x200786, 0x200798, 0x2007a8, 0x200814, 0x200bc2, 0x200bf8, 0x200c72, 0x200c9c, 0x201990, 0x201a8c, 0x201aec, 0x201b20, 0x201b7a, 0x202018 };
const uint32_t dbranch_list[] = { 0x200418, 0x20044a, 0x200488, 0x20048e, 0x200492, 0x2004a2, 0x2004a8, 0x2004b4, 0x2004bc, 0x2004d0, 0x2004de, 0x2004e6, 0x2004ee, 0x200520, 0x200526, 0x200538, 0x200574, 0x20057e, 0x200596, 0x20059e, 0x2005a4, 0x2005ba, 0x2005f8, 0x200600, 0x20061c, 0x20063a, 0x200650, 0x2006a0, 0x2006bc, 0x2006c2, 0x2006d2, 0x200730, 0x200762, 0x200764, 0x200820, 0x200832, 0x200852, 0x200868, 0x20087c, 0x20088e, 0x2008b8, 0x2008c4, 0x2008ca, 0x2008d2, 0x2008de, 0x2008e2, 0x2008ec, 0x2008fc, 0x2008fe, 0x200906, 0x200916, 0x20091a, 0x200924, 0x200932, 0x20093e, 0x200946, 0x200958, 0x20095c, 0x200972, 0x20098c, 0x20099c, 0x2009a4, 0x2009b4, 0x2009bc, 0x2009ce, 0x2009e4, 0x2009fa, 0x200a02, 0x200a2c, 0x200a30, 0x200a42, 0x200a64, 0x200a8a, 0x200a96, 0x200ab4, 0x200abc, 0x200ad0, 0x200aec, 0x200b16, 0x200b22, 0x200b40, 0x200b48, 0x200b60, 0x200b76, 0x200b9e, 0x200ba6, 0x200bba, 0x200bc0, 0x200bd8, 0x200be8, 0x200c0a, 0x200c18, 0x200c24, 0x200c2a, 0x200c30, 0x200c3a, 0x200c48, 0x200c4c, 0x200c5e, 0x200c60, 0x200c64, 0x200c6c, 0x200cd0, 0x200ce0, 0x200d12, 0x200d26, 0x200d2c, 0x200e0c, 0x200e9e, 0x200eee, 0x200f0a, 0x200f40, 0x200f88, 0x200fd4, 0x200fde, 0x200fe8, 0x20100c, 0x201036, 0x201040, 0x20106a, 0x201070, 0x20107c, 0x201082, 0x20109e, 0x2010a2, 0x2010ac, 0x2010bc, 0x2010ca, 0x2010ce, 0x201102, 0x201120, 0x201128, 0x201134, 0x20113a, 0x201152, 0x20115e, 0x201162, 0x20119a, 0x2011a2, 0x2011b4, 0x2011bc, 0x2011ce, 0x2011f0, 0x2011fe, 0x201202, 0x201222, 0x201238, 0x20125e, 0x20127a, 0x2012a8, 0x2012e8, 0x2012fa, 0x20130a, 0x20132a, 0x201338, 0x201354, 0x20135e, 0x201366, 0x201382, 0x20138c, 0x2013b0, 0x2013c4, 0x2013d2, 0x2013e0, 0x201400, 0x20140c, 0x20143a, 0x201458, 0x20145e, 0x20146c, 0x201474, 0x20147e, 0x20148a, 0x201492, 0x2014a8, 0x2014b0, 0x2014c0, 0x2014dc, 0x2014e6, 0x201544, 0x20154e, 0x201558, 0x20157e, 0x201588, 0x201596, 0x20159a, 0x2015a0, 0x2015aa, 0x2015b0, 0x2015ba, 0x2015c2, 0x2015ce, 0x2015d4, 0x2015e0, 0x2015ea, 0x20160c, 0x201616, 0x20161a, 0x20163a, 0x201664, 0x20167c, 0x2016aa, 0x2016ae, 0x2016ba, 0x2016c4, 0x2016cc, 0x2016d0, 0x2016dc, 0x2016e6, 0x2016e8, 0x201704, 0x20171c, 0x201734, 0x20173e, 0x20175c, 0x201770, 0x201774, 0x201784, 0x20178c, 0x20179e, 0x2017b2, 0x2017c0, 0x2017ca, 0x2017de, 0x2017f6, 0x201808, 0x20182a, 0x20182e, 0x201844, 0x201882, 0x201886, 0x2018ba, 0x2018d4, 0x2018d8, 0x201904, 0x201910, 0x201920, 0x201924, 0x20192a, 0x201996, 0x201a12, 0x201a62, 0x201abc, 0x201b4e, 0x201b5a, 0x201b60, 0x201b68, 0x201b6e, 0x201b74, 0x201b7c, 0x201b9c, 0x201bbe, 0x201be6, 0x201bf2, 0x201bfe, 0x201c12, 0x201fd4, 0x201fe6, 0x201ffe, 0x202000, 0x202004, 0x202048, 0x20204c, 0x202054, 0x202056, 0x20205c, 0x202066, 0x202076, 0x2020a6 };


#endif // BT_S
                