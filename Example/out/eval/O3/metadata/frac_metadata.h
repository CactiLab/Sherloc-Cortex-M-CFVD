
#ifndef BT_S_H
#define BT_S_H

/********************************************
* used for run-time control flow validation *
*********************************************/

#include <stdint.h>

#define NUM_BRANCH_PAIRS 1
#define NUM_HANDLER 3
#define NUM_TASK 0
#define NUM_LOOP 4

const uint32_t icall_count = 0; 
const uint32_t ibranch_count = 1; 
const uint32_t dbranch_count = 130;
const uint32_t dcall_count = 86; 
const uint32_t ret_count = 74; 
const uint32_t handler_count = 3; 
const uint32_t PendSV = 0xdeadbeef;

const uint32_t PendSV_Entry = 0xdeadbeef;

/* branch_tab_64: <src, dst> */
const uint32_t branch_tab_32[] = { 0x118e004b };

/* exception_tab: <start_addr, end_addr> */
const uint32_t IRQ[] = { 0x200454, 0x200458, 0x20045c };
const uint32_t TASK[] = {  };
const uint32_t LOOP[] = { 0x20044e, 0x200454, 0x200458, 0x2009a8 };

const uint32_t icall_list[] = {  };
const uint32_t ibranch_list[] = {  };
const uint32_t dcall_list[] = { 0x200404, 0x20040a, 0x200418, 0x20041c, 0x200420, 0x20042a, 0x200430, 0x200494, 0x2004ac, 0x2004b8, 0x2004c4, 0x2004d0, 0x2004dc, 0x2004e8, 0x2004f4, 0x200500, 0x20050c, 0x200588, 0x20059e, 0x2005b6, 0x200608, 0x200614, 0x200622, 0x200636, 0x20065a, 0x200664, 0x200674, 0x20067c, 0x20068e, 0x200696, 0x2006a2, 0x2006b2, 0x2006d6, 0x2006e6, 0x2006fc, 0x20070c, 0x20072a, 0x200754, 0x200768, 0x200770, 0x20077e, 0x200792, 0x20079a, 0x2007a8, 0x2007bc, 0x2007c4, 0x2007d2, 0x2007e2, 0x2007ea, 0x200802, 0x200812, 0x20081e, 0x200822, 0x200826, 0x200832, 0x20084c, 0x200862, 0x200870, 0x200880, 0x200890, 0x20091a, 0x200926, 0x200934, 0x200942, 0x200950, 0x20095e, 0x20096c, 0x20097a, 0x200988, 0x200996, 0x2009a4, 0x200b04, 0x200d22, 0x200d58, 0x200e40, 0x200ea4, 0x200f44, 0x200fbc, 0x2010e8, 0x201392, 0x2013aa, 0x2013b8, 0x2013c6, 0x2013d4, 0x2013e2, 0x2013f0 };
const uint32_t ret_list[] = { 0x20040e, 0x200412, 0x200446, 0x200514, 0x2008c6, 0x2008f0, 0x200a48, 0x200a54, 0x200a6c, 0x200adc, 0x200afc, 0x200b26, 0x200c44, 0x200c58, 0x200ce2, 0x200d08, 0x200d3c, 0x200d52, 0x200d80, 0x200df4, 0x200dfa, 0x200e0c, 0x200e10, 0x200e22, 0x200e28, 0x200e3c, 0x200e84, 0x200e8c, 0x200ea0, 0x200eae, 0x200ed8, 0x200ede, 0x200ef8, 0x200efe, 0x200f10, 0x200f14, 0x200f26, 0x200f2c, 0x200f40, 0x200f70, 0x200f76, 0x200f88, 0x200f8c, 0x200f9e, 0x200fa4, 0x200fb8, 0x201096, 0x2010c8, 0x2010e6, 0x20111a, 0x2011a4, 0x2011be, 0x2011ca, 0x20125a, 0x201264, 0x201270, 0x2012cc, 0x2012d8, 0x201312, 0x201320, 0x201330, 0x201344, 0x20135a, 0x20136a, 0x201374, 0x20138a, 0x2013a2, 0x2013b4, 0x2013c2, 0x2013d0, 0x2013de, 0x2013ec, 0x2013fa, 0x201414 };
const uint32_t dbranch_list[] = { 0x200442, 0x20044e, 0x200454, 0x200458, 0x200538, 0x20058e, 0x2005a4, 0x20063a, 0x200652, 0x2006b6, 0x2006c2, 0x200730, 0x200774, 0x20079e, 0x2007c8, 0x2007f0, 0x200854, 0x200866, 0x2008bc, 0x2008d2, 0x2008f2, 0x200930, 0x20094c, 0x200968, 0x200984, 0x2009a0, 0x2009a8, 0x2009cc, 0x2009d6, 0x2009fa, 0x200a0e, 0x200a38, 0x200a72, 0x200a9a, 0x200aae, 0x200aba, 0x200ac0, 0x200aca, 0x200acc, 0x200ae2, 0x200aea, 0x200b3c, 0x200b52, 0x200b84, 0x200c2c, 0x200c40, 0x200c54, 0x200c5e, 0x200c6c, 0x200cb2, 0x200cc0, 0x200cd2, 0x200cee, 0x200cf0, 0x200cf6, 0x200d16, 0x200d2c, 0x200d42, 0x200d64, 0x200d68, 0x200d6a, 0x200d6c, 0x200d6e, 0x200d70, 0x200d82, 0x200d84, 0x200d8a, 0x200d8c, 0x200de0, 0x200dec, 0x200dfc, 0x200e08, 0x200e16, 0x200e1c, 0x200e38, 0x200e50, 0x200e6a, 0x200e96, 0x200eb0, 0x200ec2, 0x200ee4, 0x200ef0, 0x200f00, 0x200f0c, 0x200f1a, 0x200f20, 0x200f3c, 0x200f54, 0x200f5c, 0x200f68, 0x200f78, 0x200f84, 0x200f92, 0x200f98, 0x200fb4, 0x200fcc, 0x200fe8, 0x20103a, 0x201052, 0x201076, 0x201094, 0x2010b8, 0x2010d8, 0x2010f0, 0x2010f4, 0x201100, 0x201106, 0x201112, 0x201132, 0x20113e, 0x20114a, 0x20114c, 0x201164, 0x20116a, 0x201180, 0x2011d8, 0x2011e2, 0x20120a, 0x201224, 0x20124a, 0x20128c, 0x20129e, 0x2012b6, 0x2012da, 0x2012e8, 0x20132a, 0x20133a, 0x201354, 0x201362, 0x20137a };


#endif // BT_S
                