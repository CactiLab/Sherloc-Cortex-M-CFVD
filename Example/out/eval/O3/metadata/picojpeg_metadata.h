
#ifndef BT_S_H
#define BT_S_H

/********************************************
* used for run-time control flow validation *
*********************************************/

#include <stdint.h>

#define NUM_BRANCH_PAIRS 6
#define NUM_HANDLER 3
#define NUM_TASK 0
#define NUM_LOOP 4

const uint32_t icall_count = 0; 
const uint32_t ibranch_count = 6; 
const uint32_t dbranch_count = 561;
const uint32_t dcall_count = 105; 
const uint32_t ret_count = 23; 
const uint32_t handler_count = 3; 
const uint32_t PendSV = 0xdeadbeef;

const uint32_t PendSV_Entry = 0xdeadbeef;

/* branch_tab_64: <src, dst> */
const uint32_t branch_tab_32[] = { 0x432004b, 0x1f3412bc, 0x209612bc, 0x21fa12bc, 0x236e12bc, 0x456447da };

/* exception_tab: <start_addr, end_addr> */
const uint32_t IRQ[] = { 0x200594, 0x200598, 0x20059c };
const uint32_t TASK[] = {  };
const uint32_t LOOP[] = { 0x20049e, 0x200594, 0x200598, 0x204378 };

const uint32_t icall_list[] = {  };
const uint32_t ibranch_list[] = { 0x1f3412bc, 0x209612bc, 0x21fa12bc, 0x236e12bc, 0x456447da };
const uint32_t dcall_list[] = { 0x200400, 0x200404, 0x20041a, 0x20045a, 0x200468, 0x20046c, 0x200470, 0x20047a, 0x200480, 0x2005d4, 0x20065e, 0x200696, 0x200708, 0x20079c, 0x20083e, 0x2008fc, 0x20099a, 0x200a66, 0x200b06, 0x200c0a, 0x200dd8, 0x200e7e, 0x200f3e, 0x201000, 0x201360, 0x201422, 0x2014d8, 0x2015a8, 0x201674, 0x201746, 0x2017ec, 0x2018b2, 0x20220a, 0x202212, 0x202840, 0x202848, 0x202854, 0x20285c, 0x2029cc, 0x2029d4, 0x202b44, 0x202b4c, 0x202b54, 0x202b5c, 0x202f94, 0x202f9c, 0x202fa4, 0x202fac, 0x203030, 0x2030d8, 0x20316a, 0x203354, 0x20343c, 0x2034d0, 0x20357c, 0x2036a6, 0x203762, 0x203992, 0x203a52, 0x203b12, 0x203bc6, 0x203cd0, 0x203e80, 0x203ee0, 0x203f92, 0x20413c, 0x20416c, 0x2041fc, 0x204266, 0x2042ea, 0x2042f6, 0x204304, 0x204312, 0x204320, 0x20432e, 0x20433c, 0x20434a, 0x204358, 0x204366, 0x204374, 0x20440e, 0x2044e8, 0x204826, 0x2048be, 0x204968, 0x204a06, 0x204ab6, 0x204b50, 0x204bfa, 0x204c8a, 0x204de8, 0x204f14, 0x204fd2, 0x2052e4, 0x205376, 0x20547a, 0x2055c4, 0x20569e, 0x205800, 0x2058d8, 0x20599a, 0x205d86, 0x205fa0, 0x206052, 0x207300 };
const uint32_t ret_list[] = { 0x200456, 0x20045e, 0x200462, 0x200496, 0x20052c, 0x200574, 0x200590, 0x201288, 0x2041a2, 0x204246, 0x204294, 0x2042d4, 0x2062e6, 0x2062f8, 0x20630a, 0x206594, 0x20671c, 0x2069d4, 0x206c3e, 0x206dc8, 0x20707e, 0x2070ae, 0x2070b6 };
const uint32_t dbranch_list[] = { 0x200418, 0x20044a, 0x200492, 0x20049e, 0x2004a6, 0x2004ae, 0x2004e0, 0x2004e6, 0x2004f8, 0x200532, 0x200548, 0x200594, 0x200598, 0x20069e, 0x2006a8, 0x2006c8, 0x2006d4, 0x20071e, 0x20075c, 0x200770, 0x2007b2, 0x2007ee, 0x200802, 0x200812, 0x200854, 0x20088a, 0x2008aa, 0x2008d0, 0x200912, 0x200960, 0x200968, 0x2009b0, 0x2009e6, 0x200a10, 0x200a36, 0x200a7a, 0x200ace, 0x200ad6, 0x200b1c, 0x200b52, 0x200b82, 0x200bb0, 0x200bba, 0x200bd8, 0x200c20, 0x200c5c, 0x200c84, 0x200cb4, 0x200ce6, 0x200d16, 0x200d30, 0x200d36, 0x200d92, 0x200d96, 0x200da0, 0x200dae, 0x200df6, 0x200e4a, 0x200e56, 0x200e9c, 0x200ee8, 0x200f00, 0x200f12, 0x200f5c, 0x200fae, 0x200fb0, 0x200fcc, 0x200fd8, 0x20101e, 0x201064, 0x201082, 0x201098, 0x20109c, 0x2010d4, 0x20110c, 0x201142, 0x20117a, 0x2011a4, 0x2011da, 0x201202, 0x201258, 0x20129c, 0x2012a2, 0x2012b6, 0x2012ba, 0x2012e4, 0x20135a, 0x20135e, 0x2013b6, 0x2013d8, 0x2013e6, 0x2013ee, 0x2013f4, 0x2013f8, 0x201440, 0x20146e, 0x201474, 0x201476, 0x201492, 0x2014a4, 0x2014f6, 0x201522, 0x201526, 0x20158a, 0x2015a6, 0x2015bc, 0x2015cc, 0x2015e0, 0x2015f0, 0x20166c, 0x201670, 0x2016d0, 0x201700, 0x201710, 0x201718, 0x20171e, 0x201722, 0x201762, 0x20178c, 0x201790, 0x201792, 0x2017ae, 0x2017be, 0x201808, 0x201830, 0x201834, 0x201892, 0x2018ae, 0x2018b8, 0x2018e2, 0x20190a, 0x201926, 0x201940, 0x20195c, 0x201976, 0x201992, 0x2019ac, 0x2019c8, 0x2019e2, 0x2019fe, 0x201a18, 0x201a34, 0x201a4e, 0x201a68, 0x201a7e, 0x201a82, 0x201a90, 0x201b26, 0x201b5c, 0x201b62, 0x201b96, 0x201b9a, 0x201ba6, 0x201bc6, 0x201bd4, 0x201bde, 0x201c00, 0x201c2a, 0x201c32, 0x201cd2, 0x201cf6, 0x201d06, 0x201d0e, 0x201e80, 0x201eb0, 0x201ee0, 0x201f30, 0x202084, 0x202088, 0x202092, 0x2021e8, 0x2021ec, 0x2021f6, 0x202216, 0x20235c, 0x202360, 0x20236a, 0x2024bc, 0x2024c0, 0x2024ca, 0x2024d0, 0x2024d6, 0x2025e4, 0x2025e6, 0x2026ea, 0x2026ec, 0x202834, 0x202838, 0x20284c, 0x202860, 0x2029c0, 0x2029c4, 0x2029d8, 0x202b38, 0x202b3c, 0x202b60, 0x202cc0, 0x202cc4, 0x202e24, 0x202e28, 0x202f88, 0x202f8c, 0x202fb0, 0x202fd4, 0x203000, 0x203006, 0x20300c, 0x20304c, 0x20307a, 0x20307c, 0x2030a8, 0x2030ae, 0x2030b4, 0x2030f4, 0x203108, 0x203120, 0x203144, 0x20319c, 0x2031ae, 0x2031ba, 0x2031c2, 0x2031d2, 0x203200, 0x20322a, 0x20323a, 0x20324a, 0x203252, 0x203262, 0x203278, 0x203280, 0x20328a, 0x203294, 0x2032d0, 0x20336a, 0x203374, 0x20337a, 0x20339a, 0x2033a0, 0x2033d6, 0x20340e, 0x203452, 0x20348e, 0x2034a2, 0x2034e6, 0x203526, 0x203542, 0x203550, 0x20359a, 0x2035de, 0x203616, 0x203620, 0x20362a, 0x203636, 0x20366e, 0x203672, 0x2036c4, 0x203708, 0x20372a, 0x20372e, 0x203780, 0x2037be, 0x2037e6, 0x2037ec, 0x2037f4, 0x2037f8, 0x2037fe, 0x203802, 0x203808, 0x20380e, 0x203810, 0x203814, 0x203818, 0x20384a, 0x20384e, 0x203874, 0x20389a, 0x2038b0, 0x2038da, 0x20390a, 0x203932, 0x20394e, 0x20395a, 0x2039a8, 0x2039e8, 0x203a00, 0x203a1a, 0x203a68, 0x203a9e, 0x203ad0, 0x203ada, 0x203b28, 0x203b6c, 0x203b80, 0x203b8a, 0x203bde, 0x203c36, 0x203c74, 0x203c90, 0x203c98, 0x203ca0, 0x203cee, 0x203d28, 0x203d58, 0x203d82, 0x203daa, 0x203dc2, 0x203dcc, 0x203df8, 0x203e02, 0x203e1c, 0x203e36, 0x203e94, 0x203ea8, 0x203eb2, 0x203eb6, 0x203efe, 0x203f46, 0x203f5a, 0x203f5e, 0x203f68, 0x203fb0, 0x203ff0, 0x20402a, 0x204064, 0x204084, 0x2040a4, 0x2040c4, 0x2040e6, 0x20410e, 0x20412e, 0x204154, 0x204164, 0x204184, 0x2041c8, 0x2041ce, 0x20420a, 0x20421e, 0x204222, 0x20422e, 0x204278, 0x204298, 0x204300, 0x20431c, 0x204338, 0x204354, 0x204370, 0x204378, 0x2043b8, 0x2043bc, 0x2043c8, 0x2043d8, 0x204424, 0x204484, 0x2044b4, 0x2044b8, 0x204506, 0x20454c, 0x204560, 0x204768, 0x20479e, 0x2047ca, 0x2047d8, 0x2047f4, 0x204844, 0x204888, 0x20488e, 0x2048dc, 0x20491a, 0x204938, 0x204986, 0x2049d0, 0x2049d6, 0x204a24, 0x204a6a, 0x204a84, 0x204ad4, 0x204b1a, 0x204b22, 0x204b72, 0x204bac, 0x204bca, 0x204c18, 0x204c58, 0x204c5e, 0x204ca8, 0x204ce4, 0x204d14, 0x204d1a, 0x204d20, 0x204d50, 0x204d62, 0x204d90, 0x204dae, 0x204db4, 0x204e0a, 0x204e50, 0x204e64, 0x204eb8, 0x204ed0, 0x204eda, 0x204ee0, 0x204f36, 0x204f7c, 0x204f7e, 0x204f8c, 0x204f96, 0x204f9c, 0x204ff4, 0x20503a, 0x205054, 0x20508c, 0x2050c6, 0x2051f2, 0x205208, 0x205230, 0x205234, 0x20526c, 0x205298, 0x2052b8, 0x205302, 0x20533e, 0x205344, 0x205394, 0x2053ca, 0x2053e8, 0x205432, 0x205440, 0x205450, 0x205498, 0x2054e4, 0x2054fa, 0x205506, 0x205558, 0x20557c, 0x205588, 0x205594, 0x2055e4, 0x205642, 0x205644, 0x205662, 0x20566e, 0x2056bc, 0x205704, 0x20573a, 0x205772, 0x205786, 0x20578e, 0x2057a4, 0x2057c2, 0x2057cc, 0x2057d8, 0x20581e, 0x205860, 0x205864, 0x20587a, 0x20589a, 0x2058a2, 0x2058a8, 0x2058f6, 0x20594a, 0x205964, 0x20596a, 0x2059ba, 0x205a00, 0x205a38, 0x205a6e, 0x205a94, 0x205abc, 0x205ac8, 0x205ae0, 0x205aec, 0x205b08, 0x205b14, 0x205b30, 0x205b3c, 0x205b58, 0x205b64, 0x205b80, 0x205b8c, 0x205ba8, 0x205bb4, 0x205bd0, 0x205bdc, 0x205bf8, 0x205c04, 0x205c20, 0x205c2c, 0x205c48, 0x205c54, 0x205c70, 0x205c7c, 0x205c98, 0x205ca4, 0x205cc2, 0x205cce, 0x205d08, 0x205d40, 0x205d48, 0x205d50, 0x205d56, 0x205da4, 0x205dee, 0x205e20, 0x205e26, 0x205e68, 0x205ea4, 0x205ede, 0x205f16, 0x205f2c, 0x205f42, 0x205f50, 0x205f64, 0x205f6c, 0x205f70, 0x205fbe, 0x206000, 0x206014, 0x206018, 0x206022, 0x206070, 0x2060ba, 0x2060f0, 0x206126, 0x206152, 0x20618c, 0x2061c4, 0x2061fc, 0x206234, 0x20626c, 0x20629a, 0x2062d2, 0x206590, 0x206718, 0x2069d0, 0x206c3a, 0x206dc4, 0x20707a, 0x2070ba, 0x2070bc, 0x207166, 0x20716c, 0x20716e, 0x207180, 0x20728c, 0x2072b6, 0x2072c4, 0x2072d0, 0x2072dc, 0x2072ee, 0x2072fa, 0x2072fe, 0x20731e, 0x207328, 0x207334, 0x207342, 0x20734a, 0x207350, 0x207362, 0x207374, 0x207380, 0x2073a4 };


#endif // BT_S
                