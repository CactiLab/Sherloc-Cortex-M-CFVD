
#ifndef BT_S_H
#define BT_S_H

/********************************************
* used for run-time control flow validation *
*********************************************/

#include <stdint.h>

#define NUM_BRANCH_PAIRS 2
#define NUM_HANDLER 3
#define NUM_TASK 0
#define NUM_LOOP 4

const uint32_t icall_count = 0; 
const uint32_t ibranch_count = 2; 
const uint32_t dbranch_count = 260;
const uint32_t dcall_count = 408; 
const uint32_t ret_count = 119; 
const uint32_t handler_count = 3; 
const uint32_t PendSV = 0xdeadbeef;

const uint32_t PendSV_Entry = 0xdeadbeef;

/* branch_tab_64: <src, dst> */
const uint32_t branch_tab_32[] = { 0x432004b, 0x2b66004b };

/* exception_tab: <start_addr, end_addr> */
const uint32_t IRQ[] = { 0x2004c4, 0x2004c8, 0x200ab4 };
const uint32_t TASK[] = {  };
const uint32_t LOOP[] = { 0x2004be, 0x2004c4, 0x2004c8, 0x200ef0 };

const uint32_t icall_list[] = {  };
const uint32_t ibranch_list[] = {  };
const uint32_t dcall_list[] = { 0x200400, 0x200404, 0x20041a, 0x20045a, 0x200468, 0x20046c, 0x200470, 0x20047a, 0x200480, 0x200486, 0x200492, 0x20052c, 0x200540, 0x20054c, 0x200558, 0x20056c, 0x200574, 0x200588, 0x2005a0, 0x2005b0, 0x2005bc, 0x2005c8, 0x2005d4, 0x2005f2, 0x200600, 0x20060c, 0x200618, 0x20062c, 0x200634, 0x200640, 0x20064c, 0x200662, 0x200670, 0x20067e, 0x20068a, 0x20069a, 0x2006a6, 0x2006b8, 0x2006c4, 0x2006e0, 0x2006ea, 0x2006f6, 0x2006fe, 0x200710, 0x20071e, 0x200728, 0x200734, 0x200746, 0x200750, 0x200762, 0x20076e, 0x200782, 0x20078e, 0x20079c, 0x2007a8, 0x2007c4, 0x2007cc, 0x2007d8, 0x2007e0, 0x2007f6, 0x200804, 0x20080e, 0x20081a, 0x20082a, 0x200832, 0x200842, 0x20084e, 0x200860, 0x20086c, 0x200878, 0x200884, 0x200896, 0x2008a0, 0x2008ac, 0x2008b4, 0x2008c8, 0x2008d2, 0x2008e0, 0x2008ec, 0x2008fc, 0x200904, 0x200916, 0x200922, 0x20093e, 0x20094a, 0x20095a, 0x200966, 0x20097e, 0x200986, 0x200992, 0x20099a, 0x2009ac, 0x2009b8, 0x2009c0, 0x2009cc, 0x2009e0, 0x2009ea, 0x2009f8, 0x200a04, 0x200a18, 0x200a24, 0x200a32, 0x200a3e, 0x200a52, 0x200a5a, 0x200a66, 0x200a6e, 0x200aec, 0x200bb6, 0x200bba, 0x200bbe, 0x200bc2, 0x200bc6, 0x200bca, 0x200bce, 0x200bd2, 0x200bd6, 0x200bda, 0x200bde, 0x200be2, 0x200be6, 0x200bea, 0x200c18, 0x200c24, 0x200c34, 0x200c40, 0x200c58, 0x200c60, 0x200c74, 0x200c7c, 0x200c88, 0x200c90, 0x200c9c, 0x200ca4, 0x200cb0, 0x200cdc, 0x200cf0, 0x200d04, 0x200d0c, 0x200d20, 0x200d28, 0x200d42, 0x200d4a, 0x200d5a, 0x200d62, 0x200d6e, 0x200d76, 0x200d82, 0x200df4, 0x200e04, 0x200e0c, 0x200e10, 0x200e62, 0x200e6e, 0x200e7c, 0x200e8a, 0x200e98, 0x200ea6, 0x200eb4, 0x200ec2, 0x200ed0, 0x200ede, 0x200eec, 0x200f9a, 0x200fa2, 0x200fba, 0x200fe4, 0x200ff8, 0x201000, 0x201008, 0x201020, 0x201034, 0x20103c, 0x20105e, 0x201066, 0x20107a, 0x201082, 0x20109e, 0x2010b2, 0x2010be, 0x2010d4, 0x2010e0, 0x2010f6, 0x201102, 0x201116, 0x201122, 0x20112e, 0x201134, 0x201140, 0x20115c, 0x201168, 0x201184, 0x20119c, 0x20123c, 0x201240, 0x20124e, 0x20125c, 0x201282, 0x20128a, 0x20129c, 0x2012a4, 0x2012b0, 0x2012b8, 0x20133c, 0x201344, 0x201368, 0x201370, 0x2013ac, 0x2013d8, 0x2013f4, 0x2013f8, 0x2013fe, 0x20140e, 0x20141a, 0x20142e, 0x20143e, 0x20145e, 0x201466, 0x201478, 0x20148c, 0x2014a2, 0x2014ae, 0x2014ba, 0x2014d0, 0x2014e4, 0x2014ec, 0x2014f4, 0x2014fc, 0x201504, 0x201528, 0x20153c, 0x201544, 0x201550, 0x201558, 0x201580, 0x201590, 0x201598, 0x201674, 0x201688, 0x20168c, 0x201694, 0x2016ae, 0x2016ec, 0x201716, 0x20172e, 0x20173a, 0x20174a, 0x201752, 0x201764, 0x201770, 0x201780, 0x201788, 0x2017a0, 0x2017ac, 0x2017b4, 0x2017bc, 0x2017cc, 0x2017d4, 0x2017f0, 0x201800, 0x20180a, 0x20181a, 0x20182e, 0x20184c, 0x201858, 0x20186e, 0x20187a, 0x201884, 0x20189c, 0x2018a4, 0x2018b6, 0x2018c6, 0x2018ce, 0x2018d6, 0x2018de, 0x2018e6, 0x2018f6, 0x2018fe, 0x20190c, 0x201914, 0x20191c, 0x201924, 0x201934, 0x201944, 0x20194c, 0x201954, 0x20195c, 0x20196c, 0x201974, 0x201982, 0x20198a, 0x201992, 0x201a26, 0x201a2a, 0x201a38, 0x201a46, 0x201a60, 0x201a68, 0x201a7e, 0x201a8e, 0x201a98, 0x201aa0, 0x201ad4, 0x201b26, 0x201ba2, 0x201bb6, 0x201bc8, 0x201bd0, 0x201bdc, 0x201bf0, 0x201c02, 0x201c0a, 0x201c26, 0x201c36, 0x201c42, 0x201c46, 0x201c4c, 0x201c58, 0x201c60, 0x201c70, 0x201c8c, 0x201cc2, 0x201cd2, 0x201ce2, 0x201cea, 0x201cfe, 0x201d06, 0x201d26, 0x201de6, 0x201df0, 0x201dfc, 0x201e06, 0x201e12, 0x201e1c, 0x201e28, 0x201e38, 0x201e40, 0x201e48, 0x201e60, 0x201e68, 0x201e70, 0x201e78, 0x201e84, 0x201e9c, 0x201ea4, 0x201ebc, 0x201ec4, 0x201eda, 0x201fa4, 0x201fcc, 0x201fe2, 0x201fee, 0x202002, 0x202012, 0x20201a, 0x20202e, 0x202044, 0x20204c, 0x202084, 0x202098, 0x2020a8, 0x2020b0, 0x202110, 0x20212a, 0x202152, 0x20215e, 0x202166, 0x202172, 0x202182, 0x20218e, 0x202196, 0x2021a2, 0x2021b2, 0x2021be, 0x2021c6, 0x2021d2, 0x202208, 0x202210, 0x202228, 0x20223c, 0x202252, 0x20226c, 0x20227c, 0x202290, 0x202298, 0x2022a0, 0x2022a8, 0x2022b0, 0x2022bc, 0x2022d6, 0x2022de, 0x2022e6, 0x2022f2, 0x202322, 0x20234a, 0x202366, 0x202386, 0x2023a6, 0x20252c, 0x20274a, 0x202780, 0x202868, 0x2028cc, 0x202994, 0x202ac0, 0x202da8, 0x202f86, 0x202fc8 };
const uint32_t ret_list[] = { 0x200456, 0x20045e, 0x200462, 0x20048c, 0x200498, 0x20049e, 0x2004b6, 0x200aae, 0x200e20, 0x200f34, 0x200f7e, 0x200fb0, 0x201196, 0x201246, 0x201254, 0x201288, 0x201290, 0x2012ae, 0x2012c2, 0x20132a, 0x20172a, 0x2017e2, 0x201a30, 0x201a3e, 0x201a72, 0x201a84, 0x201a94, 0x201aaa, 0x201b38, 0x201b76, 0x201fbe, 0x20205c, 0x202148, 0x2021de, 0x20221e, 0x2022ca, 0x20232a, 0x202352, 0x20236e, 0x20238e, 0x2023ae, 0x2023ce, 0x2023d4, 0x2023da, 0x2023e0, 0x2023e6, 0x202470, 0x20247c, 0x202494, 0x202504, 0x202524, 0x20254e, 0x20266c, 0x202680, 0x20270a, 0x202730, 0x202764, 0x20277a, 0x2027a8, 0x20281c, 0x202822, 0x202834, 0x202838, 0x20284a, 0x202850, 0x202864, 0x2028ac, 0x2028b4, 0x2028c8, 0x2028d6, 0x202900, 0x202906, 0x202926, 0x20292c, 0x202948, 0x20294e, 0x202960, 0x202964, 0x202976, 0x20297c, 0x202990, 0x202a6e, 0x202aa0, 0x202abe, 0x202af2, 0x202b7c, 0x202b96, 0x202ba2, 0x202bbc, 0x202bc2, 0x202bd4, 0x202bd8, 0x202bea, 0x202bf0, 0x202c04, 0x202d22, 0x202d34, 0x202d9e, 0x202dba, 0x202e4e, 0x202e58, 0x202e64, 0x202ec0, 0x202ecc, 0x202f06, 0x202f14, 0x202f24, 0x202f38, 0x202f4e, 0x202f5e, 0x202f68, 0x202f7e, 0x202f96, 0x202fb4, 0x20307e, 0x203088, 0x20309c, 0x203102, 0x2031a6 };
const uint32_t dbranch_list[] = { 0x200418, 0x20044a, 0x2004b2, 0x2004be, 0x2004c4, 0x2004c8, 0x200d30, 0x200da6, 0x200db4, 0x200dbc, 0x200e16, 0x200e78, 0x200e94, 0x200eb0, 0x200ecc, 0x200ee8, 0x200ef0, 0x200f4c, 0x200f52, 0x200f54, 0x200f58, 0x200f68, 0x200f84, 0x200f90, 0x200fca, 0x200fd0, 0x201010, 0x201044, 0x20104a, 0x20108a, 0x201114, 0x201132, 0x2011a4, 0x20122c, 0x201232, 0x201236, 0x201248, 0x20126e, 0x201272, 0x20127e, 0x2012f0, 0x2012f6, 0x201300, 0x201312, 0x201340, 0x201354, 0x20136c, 0x201380, 0x20138c, 0x201392, 0x2013c6, 0x201446, 0x20144c, 0x20146a, 0x20147c, 0x2014c6, 0x201512, 0x20151e, 0x201560, 0x2015a0, 0x2015c2, 0x201614, 0x201644, 0x20164c, 0x20164e, 0x201650, 0x201660, 0x201668, 0x20166c, 0x201670, 0x201682, 0x201698, 0x201708, 0x20171a, 0x201756, 0x20179c, 0x20188e, 0x2018ac, 0x201902, 0x201928, 0x20192a, 0x201978, 0x201996, 0x201a16, 0x201a1c, 0x201a20, 0x201a32, 0x201a4e, 0x201a52, 0x201a5e, 0x201afe, 0x201b62, 0x201b86, 0x201ba0, 0x201bac, 0x201bbe, 0x201bda, 0x201be6, 0x201bf8, 0x201c16, 0x201c1c, 0x201c96, 0x201ca8, 0x201d10, 0x201d12, 0x201d1a, 0x201d30, 0x201d6c, 0x201dae, 0x201db2, 0x201db4, 0x201db8, 0x201dbc, 0x201dd0, 0x201ed2, 0x201ee8, 0x201efc, 0x201f9a, 0x20203a, 0x20206c, 0x2020b8, 0x202106, 0x202136, 0x20213a, 0x20213e, 0x202202, 0x202262, 0x2022cc, 0x2022f6, 0x2023f4, 0x2023fe, 0x202422, 0x202436, 0x202460, 0x20249a, 0x2024c2, 0x2024d6, 0x2024e2, 0x2024e8, 0x2024f2, 0x2024f4, 0x20250a, 0x202512, 0x202564, 0x20257a, 0x2025ac, 0x202654, 0x202668, 0x20267c, 0x202686, 0x202694, 0x2026da, 0x2026e8, 0x2026fa, 0x202716, 0x202718, 0x20271e, 0x20273e, 0x202754, 0x20276a, 0x20278c, 0x202790, 0x202792, 0x202794, 0x202796, 0x202798, 0x2027aa, 0x2027ac, 0x2027b2, 0x2027b4, 0x202808, 0x202814, 0x202824, 0x202830, 0x20283e, 0x202844, 0x202860, 0x202878, 0x202892, 0x2028be, 0x2028d8, 0x2028ea, 0x202910, 0x202934, 0x202940, 0x202950, 0x20295c, 0x20296a, 0x202970, 0x20298c, 0x2029a4, 0x2029c0, 0x202a12, 0x202a2a, 0x202a4e, 0x202a6c, 0x202a90, 0x202ab0, 0x202ac8, 0x202acc, 0x202ad8, 0x202ade, 0x202aea, 0x202b0a, 0x202b16, 0x202b22, 0x202b24, 0x202b3c, 0x202b42, 0x202b58, 0x202ba8, 0x202bb4, 0x202bc4, 0x202bd0, 0x202bde, 0x202be4, 0x202c00, 0x202c0c, 0x202c1a, 0x202c22, 0x202c34, 0x202c50, 0x202d1c, 0x202d2c, 0x202d2e, 0x202d68, 0x202d70, 0x202d78, 0x202d80, 0x202d88, 0x202d92, 0x202d94, 0x202dac, 0x202dcc, 0x202dd6, 0x202dfe, 0x202e18, 0x202e3e, 0x202e80, 0x202e92, 0x202eaa, 0x202ece, 0x202edc, 0x202f1e, 0x202f2e, 0x202f48, 0x202f56, 0x202f6e, 0x202fb8, 0x203048, 0x20304a, 0x2030ba, 0x203100, 0x20315e, 0x203162, 0x203186, 0x203198, 0x203204, 0x203208, 0x20320c };


#endif // BT_S
                