
#ifndef BT_S_H
#define BT_S_H

/********************************************
* used for run-time control flow validation *
*********************************************/

#include <stdint.h>

#define NUM_BRANCH_PAIRS 8
#define NUM_HANDLER 6
#define NUM_TASK 4
#define NUM_LOOP 24

const uint32_t icall_count = 8; 
const uint32_t ibranch_count = 8; 
const uint32_t dbranch_count = 331;
const uint32_t dcall_count = 64; 
const uint32_t ret_count = 18; 
const uint32_t handler_count = 6; 
const uint32_t PendSV = 0x201e6c;

const uint32_t PendSV_Entry = 0x201e6c;

/* branch_tab_64: <src, dst> */
const uint32_t branch_tab_32[] = { 0x17341728, 0x178c1788, 0x180e1808, 0x1838163c, 0x1f341f04, 0x1f341f24, 0x1f342000, 0x22322654 };

/* exception_tab: <start_addr, end_addr> */
const uint32_t IRQ[] = { 0x201d7c, 0x201f24, 0x202218, 0x20221c, 0x202220, 0x202238 };
const uint32_t TASK[] = { 0x200eb8, 0x200f9a, 0x201080, 0x201a94, 0x20263c, 0x202652, 0x20269c, 0x2026aa };
const uint32_t LOOP[] = { 0x2006ec, 0x2006f4, 0x2006fc, 0x200704, 0x20070c, 0x200714, 0x2007b4, 0x200b64, 0x200bc4, 0x200cb4, 0x200d64, 0x200f90, 0x200f98, 0x200ffc, 0x201a00, 0x201a08, 0x201a10, 0x201a18, 0x201b4c, 0x201bf8, 0x201ccc, 0x201cd4, 0x201ff4, 0x20205c };

const uint32_t icall_list[] = { 0x201234, 0x201284, 0x201306, 0x201638, 0x201734, 0x20178c, 0x20180e, 0x20191c };
const uint32_t ibranch_list[] = { 0x1838163c };
const uint32_t dcall_list[] = { 0x200400, 0x200404, 0x20041a, 0x2004a8, 0x20051c, 0x200548, 0x200588, 0x200670, 0x200674, 0x2006a4, 0x2006e6, 0x2006ee, 0x2006f6, 0x2006fe, 0x200706, 0x20070e, 0x20073a, 0x2007b0, 0x200990, 0x200b2c, 0x200b5e, 0x200b78, 0x200bb6, 0x200cb0, 0x200cdc, 0x200d5e, 0x200eea, 0x200ef2, 0x200f50, 0x200f64, 0x200f8a, 0x200f92, 0x200ff6, 0x2010ce, 0x201112, 0x201118, 0x201158, 0x20118a, 0x201190, 0x2011ec, 0x20133c, 0x201368, 0x2013bc, 0x2015ea, 0x2015ee, 0x201664, 0x201698, 0x2016a8, 0x2016da, 0x201856, 0x2019fc, 0x201a02, 0x201a0a, 0x201a12, 0x201b38, 0x201b46, 0x201bf4, 0x201cc8, 0x201cce, 0x201d7e, 0x201d84, 0x201e9e, 0x201ff0, 0x202058 };
const uint32_t ret_list[] = { 0x200474, 0x200492, 0x2006d6, 0x200984, 0x200b5a, 0x200bbe, 0x200d38, 0x200eb4, 0x20107e, 0x201b42, 0x201ca2, 0x201e20, 0x201e58, 0x201e68, 0x201f5e, 0x201fb4, 0x20204e, 0x20205e };
const uint32_t dbranch_list[] = { 0x200418, 0x200456, 0x200462, 0x200466, 0x20046e, 0x200472, 0x200486, 0x2004c8, 0x2004d4, 0x2004e2, 0x2004ee, 0x2004fc, 0x200506, 0x200514, 0x20053a, 0x200540, 0x20054e, 0x200550, 0x200556, 0x200568, 0x20056e, 0x20057a, 0x200580, 0x20058e, 0x200594, 0x200596, 0x20059e, 0x2005ac, 0x2005b4, 0x2005c6, 0x2005ca, 0x200648, 0x200654, 0x200660, 0x20068e, 0x20069e, 0x2006b4, 0x2006c0, 0x2006e2, 0x2006ec, 0x2006f4, 0x2006fc, 0x200704, 0x20070c, 0x200714, 0x200742, 0x20074c, 0x200756, 0x200760, 0x20076a, 0x200774, 0x20077e, 0x200788, 0x200792, 0x2007ae, 0x2007b4, 0x2007be, 0x2007e8, 0x200836, 0x20083a, 0x20086c, 0x200878, 0x200882, 0x2008b4, 0x2008be, 0x2008f0, 0x2009d4, 0x2009dc, 0x2009ee, 0x2009f8, 0x200b1c, 0x200b34, 0x200b40, 0x200b64, 0x200b7c, 0x200b9c, 0x200ba4, 0x200bc4, 0x200bd2, 0x200bea, 0x200c98, 0x200ca6, 0x200cae, 0x200cb4, 0x200cd6, 0x200cea, 0x200cf6, 0x200d12, 0x200d24, 0x200d4e, 0x200d5c, 0x200d64, 0x200d88, 0x200d90, 0x200dbc, 0x200dc0, 0x200dd2, 0x200dde, 0x200e22, 0x200e34, 0x200e54, 0x200e76, 0x200e7e, 0x200ee4, 0x200ef0, 0x200f40, 0x200f5a, 0x200f5e, 0x200f60, 0x200f68, 0x200f70, 0x200f88, 0x200f90, 0x200f98, 0x200f9e, 0x200fce, 0x200ff4, 0x200ffc, 0x2010d2, 0x20115c, 0x2011da, 0x2011e2, 0x2011e8, 0x201220, 0x201226, 0x20123e, 0x20126e, 0x20127a, 0x20127e, 0x201292, 0x2012a0, 0x2012ae, 0x2012b6, 0x2012be, 0x2012c8, 0x2012ca, 0x2012d0, 0x2012d6, 0x2012f4, 0x2012fe, 0x201316, 0x20131a, 0x201322, 0x201324, 0x201340, 0x201344, 0x201348, 0x2013aa, 0x2013c6, 0x201432, 0x20147a, 0x201484, 0x2014ae, 0x2014c6, 0x2014d2, 0x2014da, 0x2014e2, 0x2014ec, 0x2014ee, 0x2014f6, 0x201506, 0x201510, 0x20151a, 0x201526, 0x201528, 0x201540, 0x20154c, 0x201554, 0x20155c, 0x201566, 0x201568, 0x201570, 0x201578, 0x20157e, 0x201584, 0x201588, 0x2015b6, 0x2015c4, 0x2015f6, 0x20160e, 0x201614, 0x20161c, 0x20163a, 0x201648, 0x201680, 0x201684, 0x2016a2, 0x2016ac, 0x2016c8, 0x2016e0, 0x2016e8, 0x2016f0, 0x201722, 0x201724, 0x20173e, 0x201770, 0x201780, 0x201784, 0x20179e, 0x2017ac, 0x2017be, 0x2017c6, 0x2017ce, 0x2017d8, 0x2017da, 0x2017e4, 0x2017ea, 0x201804, 0x201810, 0x201834, 0x20184a, 0x201852, 0x20185a, 0x201864, 0x201884, 0x201888, 0x20188e, 0x201890, 0x2018a6, 0x2018c8, 0x2018d6, 0x2018de, 0x2018e6, 0x2018f0, 0x2018f2, 0x201902, 0x201906, 0x20190c, 0x201916, 0x20192a, 0x20192e, 0x201934, 0x201936, 0x20193c, 0x201946, 0x201952, 0x20195a, 0x201962, 0x20196c, 0x20196e, 0x201974, 0x20197c, 0x201988, 0x20198e, 0x20199c, 0x2019a0, 0x2019c0, 0x2019c8, 0x2019d6, 0x2019e0, 0x2019e8, 0x2019f4, 0x2019f6, 0x2019fa, 0x201a00, 0x201a08, 0x201a10, 0x201a18, 0x201ab8, 0x201ac6, 0x201b36, 0x201b4c, 0x201b66, 0x201b76, 0x201b86, 0x201b8a, 0x201b92, 0x201b96, 0x201b9c, 0x201ba0, 0x201ba6, 0x201baa, 0x201bb0, 0x201bb8, 0x201bba, 0x201bc4, 0x201bca, 0x201bd0, 0x201bd6, 0x201bde, 0x201bec, 0x201bf2, 0x201bf8, 0x201bfc, 0x201c0e, 0x201c14, 0x201c1a, 0x201c22, 0x201c24, 0x201c2a, 0x201c36, 0x201c42, 0x201c48, 0x201c9a, 0x201cbe, 0x201cc6, 0x201ccc, 0x201cd4, 0x201d0c, 0x201d12, 0x201d18, 0x201d20, 0x201d22, 0x201d28, 0x201d36, 0x201d46, 0x201d54, 0x201d78, 0x201d88, 0x201d9e, 0x201f50, 0x201f88, 0x201f9e, 0x201fc2, 0x201fc8, 0x201fca, 0x201fce, 0x201fd2, 0x201fd8, 0x201fdc, 0x201fea, 0x201fee, 0x201ff4, 0x201ff8, 0x201ffc, 0x20200a, 0x20200e, 0x202030, 0x20203e, 0x202054, 0x20205c };


#endif // BT_S
                