
#ifndef BT_S_H
#define BT_S_H

/********************************************
* used for run-time control flow validation *
*********************************************/

#include <stdint.h>

#define NUM_BRANCH_PAIRS 11
#define NUM_HANDLER 6
#define NUM_TASK 4
#define NUM_LOOP 24

const uint32_t icall_count = 8; 
const uint32_t ibranch_count = 11; 
const uint32_t dbranch_count = 331;
const uint32_t dcall_count = 64; 
const uint32_t ret_count = 18; 
const uint32_t handler_count = 6; 
const uint32_t PendSV = 0x201e4c;

const uint32_t PendSV_Entry = 0x201e4c;

/* branch_tab_64: <src, dst> */
const uint32_t branch_tab_32[] = { 0x432004b, 0x1218120c, 0x1718170c, 0x1770176c, 0x17f217ec, 0x181c1620, 0x1f141ee4, 0x1f141f04, 0x1f141fe0, 0x20682060, 0x225226a8 };

/* exception_tab: <start_addr, end_addr> */
const uint32_t IRQ[] = { 0x201d60, 0x201f04, 0x202238, 0x20223c, 0x202240, 0x202258 };
const uint32_t TASK[] = { 0x200eb8, 0x200f9a, 0x201080, 0x201a78, 0x20265c, 0x2026a4, 0x2026a4, 0x2026a6 };
const uint32_t LOOP[] = { 0x2006ec, 0x2006f4, 0x2006fc, 0x200704, 0x20070c, 0x200714, 0x2007b4, 0x200b64, 0x200bc4, 0x200cb4, 0x200d64, 0x200f90, 0x200f98, 0x200ffc, 0x2019e4, 0x2019ec, 0x2019f4, 0x2019fc, 0x201b30, 0x201bdc, 0x201cb0, 0x201cb8, 0x201fd4, 0x20203c };

const uint32_t icall_list[] = { 0x201218, 0x201268, 0x2012ea, 0x20161c, 0x201718, 0x201770, 0x2017f2, 0x201900 };
const uint32_t ibranch_list[] = { 0x181c1620 };
const uint32_t dcall_list[] = { 0x200400, 0x200404, 0x20041a, 0x2004a8, 0x20051c, 0x200548, 0x200588, 0x200670, 0x200674, 0x2006a4, 0x2006e6, 0x2006ee, 0x2006f6, 0x2006fe, 0x200706, 0x20070e, 0x20073a, 0x2007b0, 0x200990, 0x200b2c, 0x200b5e, 0x200b78, 0x200bb6, 0x200cb0, 0x200cdc, 0x200d5e, 0x200eea, 0x200ef2, 0x200f50, 0x200f64, 0x200f8a, 0x200f92, 0x200ff6, 0x2010be, 0x2010fa, 0x201100, 0x201140, 0x20116c, 0x201172, 0x2011ce, 0x201320, 0x20134c, 0x2013a0, 0x2015ce, 0x2015d2, 0x201648, 0x20167c, 0x20168c, 0x2016be, 0x20183a, 0x2019e0, 0x2019e6, 0x2019ee, 0x2019f6, 0x201b1c, 0x201b2a, 0x201bd8, 0x201cac, 0x201cb2, 0x201d62, 0x201d68, 0x201e7e, 0x201fd0, 0x202038 };
const uint32_t ret_list[] = { 0x200474, 0x200492, 0x2006d6, 0x200984, 0x200b5a, 0x200bbe, 0x200d38, 0x200eb4, 0x20107e, 0x201b26, 0x201c86, 0x201e00, 0x201e38, 0x201e48, 0x201f3e, 0x201f94, 0x20202e, 0x20203e };
const uint32_t dbranch_list[] = { 0x200418, 0x200456, 0x200462, 0x200466, 0x20046e, 0x200472, 0x200486, 0x2004c8, 0x2004d4, 0x2004e2, 0x2004ee, 0x2004fc, 0x200506, 0x200514, 0x20053a, 0x200540, 0x20054e, 0x200550, 0x200556, 0x200568, 0x20056e, 0x20057a, 0x200580, 0x20058e, 0x200594, 0x200596, 0x20059e, 0x2005ac, 0x2005b4, 0x2005c6, 0x2005ca, 0x200648, 0x200654, 0x200660, 0x20068e, 0x20069e, 0x2006b4, 0x2006c0, 0x2006e2, 0x2006ec, 0x2006f4, 0x2006fc, 0x200704, 0x20070c, 0x200714, 0x200742, 0x20074c, 0x200756, 0x200760, 0x20076a, 0x200774, 0x20077e, 0x200788, 0x200792, 0x2007ae, 0x2007b4, 0x2007be, 0x2007e8, 0x200836, 0x20083a, 0x20086c, 0x200878, 0x200882, 0x2008b4, 0x2008be, 0x2008f0, 0x2009d4, 0x2009dc, 0x2009ee, 0x2009f8, 0x200b1c, 0x200b34, 0x200b40, 0x200b64, 0x200b7c, 0x200b9c, 0x200ba4, 0x200bc4, 0x200bd2, 0x200bea, 0x200c98, 0x200ca6, 0x200cae, 0x200cb4, 0x200cd6, 0x200cea, 0x200cf6, 0x200d12, 0x200d24, 0x200d4e, 0x200d5c, 0x200d64, 0x200d88, 0x200d90, 0x200dbc, 0x200dc0, 0x200dd2, 0x200dde, 0x200e22, 0x200e34, 0x200e54, 0x200e76, 0x200e7e, 0x200ee4, 0x200ef0, 0x200f40, 0x200f5a, 0x200f5e, 0x200f60, 0x200f68, 0x200f70, 0x200f88, 0x200f90, 0x200f98, 0x200f9e, 0x200fce, 0x200ff4, 0x200ffc, 0x2010c2, 0x201144, 0x2011bc, 0x2011c4, 0x2011ca, 0x201202, 0x201208, 0x201222, 0x201252, 0x20125e, 0x201262, 0x201276, 0x201284, 0x201292, 0x20129a, 0x2012a2, 0x2012ac, 0x2012ae, 0x2012b4, 0x2012ba, 0x2012d8, 0x2012e2, 0x2012fa, 0x2012fe, 0x201306, 0x201308, 0x201324, 0x201328, 0x20132c, 0x20138e, 0x2013aa, 0x201416, 0x20145e, 0x201468, 0x201492, 0x2014aa, 0x2014b6, 0x2014be, 0x2014c6, 0x2014d0, 0x2014d2, 0x2014da, 0x2014ea, 0x2014f4, 0x2014fe, 0x20150a, 0x20150c, 0x201524, 0x201530, 0x201538, 0x201540, 0x20154a, 0x20154c, 0x201554, 0x20155c, 0x201562, 0x201568, 0x20156c, 0x20159a, 0x2015a8, 0x2015da, 0x2015f2, 0x2015f8, 0x201600, 0x20161e, 0x20162c, 0x201664, 0x201668, 0x201686, 0x201690, 0x2016ac, 0x2016c4, 0x2016cc, 0x2016d4, 0x201706, 0x201708, 0x201722, 0x201754, 0x201764, 0x201768, 0x201782, 0x201790, 0x2017a2, 0x2017aa, 0x2017b2, 0x2017bc, 0x2017be, 0x2017c8, 0x2017ce, 0x2017e8, 0x2017f4, 0x201818, 0x20182e, 0x201836, 0x20183e, 0x201848, 0x201868, 0x20186c, 0x201872, 0x201874, 0x20188a, 0x2018ac, 0x2018ba, 0x2018c2, 0x2018ca, 0x2018d4, 0x2018d6, 0x2018e6, 0x2018ea, 0x2018f0, 0x2018fa, 0x20190e, 0x201912, 0x201918, 0x20191a, 0x201920, 0x20192a, 0x201936, 0x20193e, 0x201946, 0x201950, 0x201952, 0x201958, 0x201960, 0x20196c, 0x201972, 0x201980, 0x201984, 0x2019a4, 0x2019ac, 0x2019ba, 0x2019c4, 0x2019cc, 0x2019d8, 0x2019da, 0x2019de, 0x2019e4, 0x2019ec, 0x2019f4, 0x2019fc, 0x201a9c, 0x201aaa, 0x201b1a, 0x201b30, 0x201b4a, 0x201b5a, 0x201b6a, 0x201b6e, 0x201b76, 0x201b7a, 0x201b80, 0x201b84, 0x201b8a, 0x201b8e, 0x201b94, 0x201b9c, 0x201b9e, 0x201ba8, 0x201bae, 0x201bb4, 0x201bba, 0x201bc2, 0x201bd0, 0x201bd6, 0x201bdc, 0x201be0, 0x201bf2, 0x201bf8, 0x201bfe, 0x201c06, 0x201c08, 0x201c0e, 0x201c1a, 0x201c26, 0x201c2c, 0x201c7e, 0x201ca2, 0x201caa, 0x201cb0, 0x201cb8, 0x201cf0, 0x201cf6, 0x201cfc, 0x201d04, 0x201d06, 0x201d0c, 0x201d1a, 0x201d2a, 0x201d38, 0x201d5c, 0x201d6c, 0x201d82, 0x201f30, 0x201f68, 0x201f7e, 0x201fa2, 0x201fa8, 0x201faa, 0x201fae, 0x201fb2, 0x201fb8, 0x201fbc, 0x201fca, 0x201fce, 0x201fd4, 0x201fd8, 0x201fdc, 0x201fea, 0x201fee, 0x202010, 0x20201e, 0x202034, 0x20203c };


#endif // BT_S
                