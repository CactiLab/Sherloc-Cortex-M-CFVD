
#ifndef BT_S_H
#define BT_S_H

/********************************************
* used for run-time control flow validation *
*********************************************/

#include <stdint.h>

#define NUM_BRANCH_PAIRS 1
#define NUM_HANDLER 3
#define NUM_TASK 0
#define NUM_LOOP 4

const uint32_t icall_count = 0; 
const uint32_t ibranch_count = 1; 
const uint32_t dbranch_count = 227;
const uint32_t dcall_count = 29; 
const uint32_t ret_count = 20; 
const uint32_t handler_count = 3; 
const uint32_t PendSV = 0xdeadbeef;

const uint32_t PendSV_Entry = 0xdeadbeef;

/* branch_tab_64: <src, dst> */
const uint32_t branch_tab_32[] = { 0x432004b };

/* exception_tab: <start_addr, end_addr> */
const uint32_t IRQ[] = { 0x200510, 0x200514, 0x200518 };
const uint32_t TASK[] = {  };
const uint32_t LOOP[] = { 0x2004ba, 0x200510, 0x200514, 0x2025dc };

const uint32_t icall_list[] = {  };
const uint32_t ibranch_list[] = {  };
const uint32_t dcall_list[] = { 0x200400, 0x200404, 0x20041a, 0x200476, 0x200484, 0x200488, 0x20048c, 0x200496, 0x20049c, 0x200550, 0x200574, 0x2005ca, 0x2014c8, 0x201734, 0x201902, 0x20254e, 0x20255a, 0x202568, 0x202576, 0x202584, 0x202592, 0x2025a0, 0x2025ae, 0x2025bc, 0x2025ca, 0x2025d8, 0x202b52, 0x202e26, 0x203a7e };
const uint32_t ret_list[] = { 0x200454, 0x200472, 0x20047a, 0x20047e, 0x2004b2, 0x2004fa, 0x20050c, 0x2005fe, 0x2019fa, 0x202536, 0x2026d0, 0x20296a, 0x20299a, 0x202a26, 0x202d44, 0x202f74, 0x202f80, 0x203a64, 0x203a72, 0x203cae };
const uint32_t dbranch_list[] = { 0x200418, 0x200444, 0x200466, 0x2004ae, 0x2004ba, 0x2004dc, 0x200510, 0x200514, 0x200586, 0x200590, 0x200596, 0x20059e, 0x2005b0, 0x2005ba, 0x2005ea, 0x2005f4, 0x200632, 0x200676, 0x20067a, 0x200686, 0x2006b4, 0x2006c4, 0x2006f0, 0x2006fc, 0x200726, 0x200730, 0x200734, 0x200764, 0x20081c, 0x200838, 0x2008b4, 0x20099c, 0x2009b4, 0x2009be, 0x200b42, 0x200b50, 0x2014bc, 0x2014d8, 0x2014ee, 0x201526, 0x201576, 0x20157a, 0x201586, 0x2015c0, 0x2015d0, 0x201608, 0x201614, 0x20164a, 0x201654, 0x2019f0, 0x201a0c, 0x201a40, 0x201a46, 0x201a4c, 0x201be2, 0x201be6, 0x202564, 0x202580, 0x20259c, 0x2025b8, 0x2025d4, 0x2025dc, 0x2025ee, 0x2025f4, 0x2025fa, 0x202642, 0x202646, 0x20264c, 0x2026be, 0x2026c0, 0x2027a4, 0x2027a6, 0x20282c, 0x202832, 0x202858, 0x202938, 0x202946, 0x202a2a, 0x202a44, 0x202a4a, 0x202ac4, 0x202afc, 0x202b38, 0x202b3c, 0x202b44, 0x202b68, 0x202b7a, 0x202b86, 0x202b90, 0x202b9a, 0x202ba6, 0x202bce, 0x202bd2, 0x202bf8, 0x202c0c, 0x202c22, 0x202c46, 0x202c5a, 0x202c5c, 0x202c86, 0x202c8c, 0x202c90, 0x202ca2, 0x202cae, 0x202cb4, 0x202cc8, 0x202cd0, 0x202ce4, 0x202cea, 0x202cee, 0x202d12, 0x202d26, 0x202d34, 0x202d42, 0x202d46, 0x202d62, 0x202d7e, 0x202d8e, 0x202d90, 0x202d9a, 0x202da2, 0x202da4, 0x202de2, 0x202de4, 0x202e0a, 0x202e2c, 0x202e40, 0x202e46, 0x202e50, 0x202e6c, 0x202e72, 0x202e7e, 0x202e86, 0x202e88, 0x202e9c, 0x202e9e, 0x202ea0, 0x202ec2, 0x202ee6, 0x202f02, 0x202f20, 0x202f26, 0x202f5c, 0x202f7c, 0x202f8e, 0x202fca, 0x202fd2, 0x202fe4, 0x202ff6, 0x203010, 0x20301a, 0x203036, 0x20303c, 0x203054, 0x203066, 0x20306e, 0x203070, 0x20308a, 0x2030b2, 0x2030c4, 0x2030d4, 0x2030d8, 0x2030de, 0x2030f6, 0x20310e, 0x203110, 0x203112, 0x20311a, 0x20311e, 0x203160, 0x203162, 0x203184, 0x20318c, 0x203190, 0x2031b0, 0x2031e4, 0x203a56, 0x203a70, 0x203a76, 0x203a8c, 0x203a8e, 0x203ad8, 0x203ada, 0x203ade, 0x203ae2, 0x203aea, 0x203af8, 0x203b08, 0x203b0c, 0x203b1a, 0x203b22, 0x203b26, 0x203b3e, 0x203b50, 0x203b68, 0x203b6c, 0x203bb2, 0x203bce, 0x203bd0, 0x203bd4, 0x203bec, 0x203c00, 0x203c14, 0x203c1a, 0x203c22, 0x203c26, 0x203c28, 0x203c2c, 0x203c90, 0x203ca8, 0x203cb2, 0x203cc0, 0x203cc6, 0x203cce, 0x203d30, 0x203d34, 0x203d48, 0x203d52, 0x203d76, 0x203d8a, 0x203d8e, 0x203d98, 0x203db4, 0x203dcc, 0x203dda, 0x203dde, 0x203de2 };


#endif // BT_S
                